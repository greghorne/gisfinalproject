<html>
	<head>
		<title></title>

	 	<style type="text/css">
		 	html, body {
   				height: 100%;
   				width: 100%;
			}
			#map { height: 100%; }
	 	</style>
	 	<script src="http://maps.google.com/maps/api/js?v=3&sensor=false"></script>

	</head>

	<body>
		<div id="map"></div>

		<script type="text/javascript">


			////////////////////////////////////////////
			// init osm map layer
			var osm = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
			    attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
			})
			////////////////////////////////////////////


			////////////////////////////////////////////
			// init black and white map layer
			var blackAndWhite = L.tileLayer(
			    'http://{s}.www.toolserver.org/tiles/bw-mapnik/{z}/{x}/{y}.png'
			    // {attribution: attribution}
			);
			////////////////////////////////////////////


			////////////////////////////////////////////
			// init google map layers
			var googleRoadmap = new L.Google('ROADMAP');
			var googleSatellite = new L.Google('SATELLITE');
			var googleTerrain = new L.Google('TERRAIN')
			var googleHybrid = new L.Google('HYBRID')
			////////////////////////////////////////////


			////////////////////////////////////////////
			// init census block map layer		
			var censusBlockGroups = new L.TileLayer.WMS("http://tigerweb.geo.census.gov/arcgis/services/TIGERweb/tigerWMS_Census2010/MapServer/WMSServer",
			{
			  layers: 'Census Block Groups',
			  format: 'image/png',
			  transparent: true,
			  detectRetina: true,
			  //unloadInvisibleTiles: true,
			  reuseTiles: true,
			  // attribution: TigerAttribution
			});
			//censusBlockGroups.addTo(map);
			////////////////////////////////////////////


			////////////////////////////////////////////
			// init map, corresponds to map container(div id = map)
			var map = L.map('map', {
			    center: [<%= @latitude %>, <%= @longitude %>],
    			zoom: <%= @zoom %>,
    			layers: [osm],
				loadingControl: true
			});
			////////////////////////////////////////////


			////////////////////////////////////////////
			// add Open Street Maps Building (3-D Buildings)
			var osmBuildings = new OSMBuildings(map).load();
			////////////////////////////////////////////


			////////////////////////////////////////////
			// Add OSM Geocoder Widget
			var options = {
				collapsed: true,
				position: 'topright',
				text: "Geocode",
				callback: function (geocodeResults) {
					console.log(geocodeResults)

					if (geocodeResults.length > 0) {

						type = geocodeResults[0].type
						if (type === "house" || type === "postcode") {
							console.log("type1 match")
							map.setView([geocodeResults[0].lat, geocodeResults[0].lon], 16);
						} else {
							console.log("type2 match")
							x1 = geocodeResults[0].boundingbox[0];
							x2 = geocodeResults[0].boundingbox[1];							
							y1 = geocodeResults[0].boundingbox[2];
							y2 = geocodeResults[0].boundingbox[3];
				
							point1 = new L.LatLng(x1, y1);
							point2 = new L.LatLng(x2, y2);
				
							bounds = new L.LatLngBounds(point1, point2);
							map.fitBounds(bounds);
						}
					}
				}
			};

			var osmGeocoder = new L.Control.OSMGeocoder(options);
			map.addControl(osmGeocoder);
			////////////////////////////////////////////


			////////////////////////////////////////////
			// this will get the bounds of the map on the initial page load
			var bounds = map.getBounds();
			console.log("Initial: ", bounds);
			////////////////////////////////////////////


			// this will subsequently get the bounds of the
			// map on further map changes
			map.on('moveend', function (e) {
				console.log("Event: moveend", map.getBounds()); 
				console.log("Zoom: ", map.getZoom())
				console.log("Center: ", map.getCenter().lat, map.getCenter().lng)
			});
			////////////////////////////////////////////


			////////////////////////////////////////////
			// add marker to map for initial location
			if  (<%= @isGeoLocation %> == true)  {
   				L.marker([<%= @latitude %>, <%= @longitude %>], {
   					bounceOnAdd: true, 
   					bounceOnAddOptions: { duration: 3000, height: 700 }
   				}).addTo(map)
			    	.bindPopup('<center>Your approximate location<br>(Based on your IP address)</center>');
			}
			////////////////////////////////////////////


			////////////////////////////////////////////
			// add scale bar to map	
			L.control.scale().addTo(map);
			////////////////////////////////////////////


			////////////////////////////////////////////
			// add layer control tool to map
			var baseMaps = {
				'Open Street Map': osm,
				'Black & White Map': blackAndWhite,
				'Google Roadmap': googleRoadmap,
				'Google Hybrid': googleHybrid,
				'Google Satellite': googleSatellite,
				'Google Terrain': googleTerrain
			}
			// define overlays
			var overLays = {
				'3-D Buildings': osmBuildings,
				'Block Groups': censusBlockGroups
			}
			// create the layer control widget on the map
			L.control.layers(baseMaps, overLays).addTo(map);
			////////////////////////////////////////////


			////////////////////////////////////////////
			// add custom controls
			L.control.layers({ postion: 'topleft'} ).addTo(map)
			////////////////////////////////////////////



			////////////////////////////////////////////
			// begin work code
			////////////////////////////////////////////

			// need results of geocode, not for the function
			// to automatically pan and zoom and place an icon
			new L.Control.GeoSearch({
    			provider: new L.GeoSearch.Provider.Google()
			}).addTo(map);

			// looking at for draw tool on map
			map.addLayer(new L.Freedraw({
				mode: L.Freedraw.MODES.CREATE
			}));

			// Route360 for Drive Time polygons
			// Emailed them, waiting on response, don't want to 
			// spend money


			////////////////////////////////////////////
			// end work code
			////////////////////////////////////////////

		</script>
	</body>
</html>